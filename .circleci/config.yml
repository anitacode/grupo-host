# .circleci/config.yml
version: 2
jobs:
  yarn_install:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules from cache
          key: node_modules-v1-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          name: Cache node_modules
          key: node_modules-v1-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  eslint:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules from cache
          key: node_modules-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Run Eslint
          command: npm run lint:js     
  jest:
    resource_class: large
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - run: npm install jest
      - run:
          name: Run Jest (if needed)
          command: npm test
workflows:
  version: 2
  run_tests:
    jobs:
      - yarn_install
      - eslint
      - jest

  # build:
    # docker:
      # - image: circleci/node:10
    # steps:
      # - checkout
      # - eslint:
        # - run: ./node_modules/.bin/eslint --fix front-end
      # Download and cache dependencies.
      # - restore_cache:
          # keys:
          # - v1-dependencies-{{ checksum "package.json" }}
          # Fallback to using the latest cache if no exact match is found.
          # - v1-dependencies-
      # - run: npm install
      # - save_cache:
          # paths:
            # - node_modules
          # key: v1-dependencies-{{ checksum "package.json" }}
      # Build the application.
      # - run: npm run generate
      # Run the FTP deployment script.
      # - run: npm run ftp-deploy